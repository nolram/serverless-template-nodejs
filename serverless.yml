service: serverless-template-nodejs

frameworkVersion: '3'

configValidationMode: error
useDotenv: true

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs16.x
  region: us-east-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    TABLE_NAME: ${self:custom.tableName}
    REGION: ${opt:region, self:provider.region}
    DB_ENDPOINT: https://dynamodb.${opt:region, self:provider.region}.amazonaws.com

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}/index/*"
  httpApi:
    name: 'template-api-gateway-${opt:stage, "dev"}'
    cors: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
  bundle:
    linting: true
  serverless-offline:
    host: 0.0.0.0
  tableName: test-data-table-${opt:stage, 'dev'}

functions:
  getUser:
    handler: src/server.handler
    memorySize: 128
    events:
      - httpApi:
          path: /api/node/user
          method: get

  insertUser:
    handler: src/server.handler
    memorySize: 128
    events:
      - httpApi:
          path: /api/node/user
          method: post

resources:
  Resources:
    DynamoDBTable: ${file(./resource/dynamodb/DynamoDBTable.yml)}